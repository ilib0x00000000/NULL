#系统调用
* 系统调用将CPU从用户态切换到核心态，以便CPU访问受到保护的内核内存
* 系统调用的组成是固定的，每个系统调用都由一个唯一的数字来标识
* 每个系统调用可辅之以一套参数，对用户空间与内核之间传递的信息加以规范

# 系统调用的步骤
1. 应用程序通过调用C语言函数库中的外壳函数，来发起系统调用
2. 对系统调用中断处理例程来说，外壳函数必须保证所有的系统调用参数可用。通过堆栈，这些参数传入外壳函数，但内核却希望这些参数置入特定的寄存器。因此，外壳函数会将上述参数复制到
寄存器
3. 由于所有系统调用进入内核的方式相同，内核需要设法区分每个系统调用。为此，外壳函数会将系统调用编号复制到一个特殊寄存器中
4. 外壳函数执行一条中断机器指令，引发处理器从用户态切换到核心态，并执行中断矢量指向的代码
5. 为处理这次中断，执行如下：
	a> 在内核栈中保存寄存器值
	b> 审核系统调用编号的有效性
	c> 以系统调用编号对存放所有调用服务例程的列表进行索引，发现并调用相应的系统调用服务例程。若系统调用服务例程带有参数，那么将首先检查参数的有效性
	d> 从内核栈中恢复各寄存器的值，并将系统调用返回值置于栈中
	e> 返回外壳函数，同时将处理器切换回用户态
6. 若系统调用服务例程的返回值表明调用有误，外壳函数会使用该值来设置全局变量errno


      外壳函数
        |
        v
   将参数置入寄存器
        |
        v
将系统调用转换成编号，且存入寄存器
        |
        v
 中断，CPU从用户态切换到核心态
        |
        v
  处理中断，执行系统调用
        |
        v
  检查调用是否出错，返回